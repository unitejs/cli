"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for TestConfigurations.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const commandLineParser_1 = require("unitejs-cli-core/dist/commandLineParser");
const fileSystem_1 = require("unitejs-cli-core/dist/fileSystem");
const cli_1 = require("../../../dist/cli");
describe("TestConfigurations", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let commandLineParser;
    let loggerErrorSpy;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.banner = () => { };
        loggerStub.info = () => { };
        loggerStub.warning = () => { };
        loggerStub.error = () => { };
        fileSystemStub = new fileSystem_1.FileSystem();
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        commandLineParser = new commandLineParser_1.CommandLineParser();
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemStub.directoryDelete("./test/unit/temp");
    }));
    it("can be run with success configurations", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new cli_1.CLI();
        const files = yield fileSystemStub.directoryGetFiles("./test/unit/testConfigurations/success");
        for (let i = 0; i < files.length; i++) {
            // tslint:disable-next-line
            console.log(`      configuration: ${files[i]}`);
            yield fileSystemStub.directoryDelete("./test/unit/temp");
            const uniteConfig = yield fileSystemStub.fileReadJson("./test/unit/testConfigurations/success", files[i]);
            commandLineParser.parse(["node", "./bin/unite.js", "configure",
                uniteConfig.packageName ? `--packageName=${uniteConfig.packageName}` : "",
                uniteConfig.title ? `--title="${uniteConfig.title}"` : "",
                uniteConfig.license ? `--license=${uniteConfig.license}` : "",
                uniteConfig.sourceLanguage ? `--sourceLanguage=${uniteConfig.sourceLanguage}` : "",
                uniteConfig.moduleType ? `--moduleType=${uniteConfig.moduleType}` : "",
                uniteConfig.bundler ? `--bundler=${uniteConfig.bundler}` : "",
                uniteConfig.unitTestRunner ? `--unitTestRunner=${uniteConfig.unitTestRunner}` : "",
                uniteConfig.unitTestFramework ? `--unitTestFramework=${uniteConfig.unitTestFramework}` : "",
                uniteConfig.unitTestEngine ? `--unitTestEngine=${uniteConfig.unitTestEngine}` : "",
                uniteConfig.e2eTestRunner ? `--e2eTestRunner=${uniteConfig.e2eTestRunner}` : "",
                uniteConfig.e2eTestFramework ? `--e2eTestFramework=${uniteConfig.e2eTestFramework}` : "",
                uniteConfig.linter ? `--linter=${uniteConfig.linter}` : "",
                uniteConfig.cssPre ? `--cssPre=${uniteConfig.cssPre}` : "",
                uniteConfig.cssPost ? `--cssPost=${uniteConfig.cssPost}` : "",
                uniteConfig.applicationFramework ? `--appFramework=${uniteConfig.applicationFramework}` : "",
                "--outputDirectory=./test/unit/temp"
            ]);
            yield obj.initialise(loggerStub, fileSystemStub);
            const res = yield obj.handleCustomCommand(loggerStub, fileSystemStub, commandLineParser);
            if (res === 1) {
                // tslint:disable-next-line
                console.log(loggerErrorSpy.args);
            }
            Chai.expect(res).to.be.equal(0);
            const fileExists = yield fileSystemStub.fileExists("./test/unit/temp/", "unite.json");
            Chai.expect(fileExists).to.be.equal(true);
        }
    }));
    it("can fail to run with fail configurations", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new cli_1.CLI();
        const files = yield fileSystemStub.directoryGetFiles("./test/unit/testConfigurations/fail");
        for (let i = 0; i < files.length; i++) {
            // tslint:disable-next-line
            console.log(`      configuration: ${files[i]}`);
            yield fileSystemStub.directoryDelete("./test/unit/temp");
            const uniteConfig = yield fileSystemStub.fileReadJson("./test/unit/testConfigurations/fail", files[i]);
            commandLineParser.parse(["node", "./bin/unite.js", "configure",
                uniteConfig.packageName ? `--packageName=${uniteConfig.packageName}` : "",
                uniteConfig.title ? `--title="${uniteConfig.title}"` : "",
                uniteConfig.license ? `--license=${uniteConfig.license}` : "",
                uniteConfig.sourceLanguage ? `--sourceLanguage=${uniteConfig.sourceLanguage}` : "",
                uniteConfig.moduleType ? `--moduleType=${uniteConfig.moduleType}` : "",
                uniteConfig.bundler ? `--bundler=${uniteConfig.bundler}` : "",
                uniteConfig.unitTestRunner ? `--unitTestRunner=${uniteConfig.unitTestRunner}` : "",
                uniteConfig.unitTestFramework ? `--unitTestFramework=${uniteConfig.unitTestFramework}` : "",
                uniteConfig.unitTestEngine ? `--unitTestEngine=${uniteConfig.unitTestEngine}` : "",
                uniteConfig.e2eTestRunner ? `--e2eTestRunner=${uniteConfig.e2eTestRunner}` : "",
                uniteConfig.e2eTestFramework ? `--e2eTestFramework=${uniteConfig.e2eTestFramework}` : "",
                uniteConfig.linter ? `--linter=${uniteConfig.linter}` : "",
                uniteConfig.cssPre ? `--cssPre=${uniteConfig.cssPre}` : "",
                uniteConfig.cssPost ? `--cssPost=${uniteConfig.cssPost}` : "",
                uniteConfig.applicationFramework ? `--appFramework=${uniteConfig.applicationFramework}` : "",
                "--outputDirectory=./test/unit/temp"
            ]);
            yield obj.initialise(loggerStub, fileSystemStub);
            const res = yield obj.handleCustomCommand(loggerStub, fileSystemStub, commandLineParser);
            // tslint:disable-next-line
            console.log(`          => ${loggerErrorSpy.args[loggerErrorSpy.args.length - 1][0]}\r\n`);
            Chai.expect(res).to.be.equal(1);
            const fileExists = yield fileSystemStub.fileExists("./test/unit/temp/", "unite.json");
            Chai.expect(fileExists).to.be.equal(false);
        }
    }));
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
