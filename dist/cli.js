"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Main entry point.
 */
const cliBase_1 = require("unitejs-cli-core/dist/cliBase");
const engine_1 = require("unitejs-engine/dist/engine/engine");
const commandLineArgConstants_1 = require("./commandLineArgConstants");
const commandLineCommandConstants_1 = require("./commandLineCommandConstants");
class CLI extends cliBase_1.CLIBase {
    constructor() {
        super(CLI.APP_NAME);
    }
    initialise(logger, fileSystem) {
        return __awaiter(this, void 0, void 0, function* () {
            this._engine = new engine_1.Engine(logger, fileSystem);
            return this._engine.initialise();
        });
    }
    handleCustomCommand(logger, fileSystem, commandLineParser) {
        return __awaiter(this, void 0, void 0, function* () {
            let ret = -1;
            const command = commandLineParser.getCommand();
            switch (command) {
                case commandLineCommandConstants_1.CommandLineCommandConstants.CONFIGURE: {
                    logger.info("command", { command });
                    const packageName = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PACKAGE_NAME);
                    const title = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.TITLE);
                    const license = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.LICENSE);
                    const sourceLanguage = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_LANGUAGE);
                    const moduleType = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.MODULE_TYPE);
                    const bundler = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.BUNDLER);
                    const unitTestRunner = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.UNIT_TEST_RUNNER);
                    const unitTestFramework = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.UNIT_TEST_FRAMEWORK);
                    const unitTestEngine = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.UNIT_TEST_ENGINE);
                    const e2eTestRunner = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.E2E_TEST_RUNNER);
                    const e2eTestFramework = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.E2E_TEST_FRAMEWORK);
                    const linter = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.LINTER);
                    const packageManager = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PACKAGE_MANAGER);
                    const cssPre = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.CSS_PRE_PROCESSOR);
                    const cssPost = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.CSS_POST_PROCESSOR);
                    const cssLinter = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.CSS_LINTER);
                    const documenter = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DOCUMENTER);
                    const server = "BrowserSync"; // commandLineParser.getStringArgument(CommandLineArgConstants.CSS_POST_PROCESSOR);
                    const taskManager = "Gulp"; //commandLineParser.getStringArgument(CommandLineArgConstants.CSS_POST_PROCESSOR);
                    const ides = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.IDES);
                    const applicationFramework = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.APP_FRAMEWORK);
                    const profile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PROFILE);
                    const force = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.FORCE);
                    const noCreateSource = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.NO_CREATE_SOURCE);
                    const description = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DESCRIPTION);
                    const shortName = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SHORT_NAME);
                    const keywords = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.KEYWORDS);
                    const webSite = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.WEB_SITE);
                    const organization = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.ORGANIZATION);
                    const copyright = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.COPYRIGHT);
                    const namespace = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.NAMESPACE);
                    const author = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.AUTHOR);
                    const authorEmail = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.AUTHOR_EMAIL);
                    const authorWebSite = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.AUTHOR_WEBSITE);
                    const outputDirectory = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OUTPUT_DIRECTORY);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        ret = yield this._engine.command(command, {
                            packageName,
                            title,
                            license,
                            sourceLanguage,
                            moduleType,
                            bundler,
                            unitTestRunner,
                            unitTestFramework,
                            unitTestEngine,
                            e2eTestRunner,
                            e2eTestFramework,
                            linter,
                            cssPre,
                            cssPost,
                            cssLinter,
                            documenter,
                            server,
                            taskManager,
                            ides,
                            packageManager,
                            applicationFramework,
                            profile,
                            force,
                            noCreateSource,
                            description,
                            shortName,
                            keywords,
                            webSite,
                            organization,
                            copyright,
                            namespace,
                            author,
                            authorEmail,
                            authorWebSite,
                            outputDirectory
                        });
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.CLIENT_PACKAGE: {
                    logger.info("command", { command });
                    const operation = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OPERATION);
                    const packageName = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PACKAGE_NAME);
                    const version = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.VERSION);
                    const outputDirectory = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OUTPUT_DIRECTORY);
                    const packageManager = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PACKAGE_MANAGER);
                    const preload = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.PRELOAD);
                    const includeMode = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.INCLUDE_MODE);
                    const scriptIncludeMode = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SCRIPT_INCLUDE_MODE);
                    const isPackage = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.IS_PACKAGE);
                    const main = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.MAIN);
                    const mainMinified = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.MAIN_MINIFIED);
                    const mainLib = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.MAIN_LIB);
                    const noScript = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.NO_SCRIPT);
                    const testingAdditions = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.TESTING_ADDITIONS);
                    const map = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.MAP);
                    const loaders = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.LOADERS);
                    const assets = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.ASSETS);
                    const profile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PROFILE);
                    const transpileAlias = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.TRANSPILE_ALIAS);
                    const transpileLanguage = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.TRANSPILE_LANGUAGE);
                    const transpileSources = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.TRANSPILE_SOURCES);
                    const transpileModules = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.TRANSPILE_MODULES);
                    const transpileStripExt = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.TRANSPILE_STRIP_EXT);
                    const transpileTransforms = commandLineParser.getStringArrayArgument(commandLineArgConstants_1.CommandLineArgConstants.TRANSPILE_TRANSFORMS);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        ret = yield this._engine.command(command, {
                            operation,
                            packageName,
                            version,
                            preload,
                            includeMode,
                            scriptIncludeMode,
                            main,
                            mainMinified,
                            mainLib,
                            isPackage,
                            testingAdditions,
                            assets,
                            map,
                            loaders,
                            noScript,
                            transpileAlias,
                            transpileLanguage,
                            transpileSources,
                            transpileModules,
                            transpileStripExt,
                            transpileTransforms,
                            profile,
                            packageManager,
                            outputDirectory
                        });
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.BUILD_CONFIGURATION: {
                    logger.info("command", { command });
                    const operation = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OPERATION);
                    const configurationName = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.CONFIGURATION_NAME);
                    const bundle = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.BUNDLE);
                    const minify = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.MINIFY);
                    const sourcemaps = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_MAPS);
                    const pwa = commandLineParser.getBooleanArgument(commandLineArgConstants_1.CommandLineArgConstants.PWA);
                    const outputDirectory = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OUTPUT_DIRECTORY);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        ret = yield this._engine.command(command, {
                            operation,
                            configurationName,
                            bundle,
                            minify,
                            sourcemaps,
                            pwa,
                            outputDirectory
                        });
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.PLATFORM: {
                    logger.info("command", { command });
                    const operation = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OPERATION);
                    const platformName = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PLATFORM_NAME);
                    const outputDirectory = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OUTPUT_DIRECTORY);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        ret = yield this._engine.command(command, {
                            operation,
                            platformName,
                            outputDirectory
                        });
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.GENERATE: {
                    logger.info("command", { command });
                    const name = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.NAME);
                    const type = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.TYPE);
                    const subFolder = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SUB_FOLDER);
                    const outputDirectory = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OUTPUT_DIRECTORY);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        ret = yield this._engine.command(command, {
                            name,
                            type,
                            subFolder,
                            outputDirectory
                        });
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.PACKAGE: {
                    logger.info("command", { command });
                    const packageName = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.PACKAGE_NAME);
                    const outputDirectory = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.OUTPUT_DIRECTORY);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        ret = yield this._engine.command(command, {
                            packageName,
                            outputDirectory
                        });
                    }
                }
            }
            return ret;
        });
    }
    displayHelp(logger) {
        logger.banner("Commands");
        logger.info("  help, version, configure, clientPackage, buildConfiguration, platform");
        logger.info("");
        logger.banner("configure");
        logger.info("");
        this.markdownTableToCli(logger, "| packageName         | plain text, package.json name rules apply    | Name to be used for your package                 |");
        this.markdownTableToCli(logger, "| license             | None/{ See [SPDX](https://spdx.org/licenses/) for options } | The license file to generate if required |");
        this.markdownTableToCli(logger, "| appFramework        | Angular/Aurelia/Polymer/                     | The application framework to use                 |");
        this.markdownTableToCli(logger, "|                     |     Preact/React/Vanilla/Vue                 |                                                  |");
        this.markdownTableToCli(logger, "| sourceLanguage      | JavaScript/TypeScript                        | The language you want to code in                 |");
        this.markdownTableToCli(logger, "| linter              | ESLint/TSLint/None                           | The linter                                       |");
        this.markdownTableToCli(logger, "|                     |                                              |   None - means no linting                        |");
        this.markdownTableToCli(logger, "| moduleType          | AMD/CommonJS/SystemJS                        | The module type you want to use                  |");
        this.markdownTableToCli(logger, "| bundler             | Browserify/RequireJS/SystemJSBuilder/Webpack | The bundler you want to use                      |");
        this.markdownTableToCli(logger, "| unitTestRunner      | Jest/Karma/None                              | The unit test runner                             |");
        this.markdownTableToCli(logger, "|                     |                                              |   None - means no unit testing                   |");
        this.markdownTableToCli(logger, "| unitTestFramework   | Jasmine/MochaChai                            | The unit test framework to use                   |");
        this.markdownTableToCli(logger, "| unitTestEngine      | JSDom/PhantomJS/ChromeHeadless               | The unit test engine to execute tests            |");
        this.markdownTableToCli(logger, "| e2eTestRunner       | Protractor/WebdriverIO/None                  | The e2e test runner                              |");
        this.markdownTableToCli(logger, "| e2eTestFramework    | Jasmine/MochaChai                            | The e2e test framework to use                    |");
        this.markdownTableToCli(logger, "| cssPre              | Css/Less/Sass/Stylus                         | The css preprocessor to use                      |");
        this.markdownTableToCli(logger, "| cssPost             | PostCss/None                                 | The css postprocessor to use                     |");
        this.markdownTableToCli(logger, "|                     |                                              |   None - means no css post processor             |");
        this.markdownTableToCli(logger, "| cssLinter           | LessHint/None/SassLint/Stylint/StyleLint     | The css linter to use                            |");
        this.markdownTableToCli(logger, "|                     |                                              |   None - means no css linter                     |");
        this.markdownTableToCli(logger, "| documenter          | ESDoc/JSDoc/None/TypeDoc                     | The documenter to use                            |");
        this.markdownTableToCli(logger, "|                     |                                              |   None - means no documenter                     |");
        this.markdownTableToCli(logger, "| ides                | VSCode                                       | This can be a comma separated list               |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional can be blank                          |");
        this.markdownTableToCli(logger, "| packageManager      | Npm/Yarn                                     | The package manager to use                       |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to npm if not already set  |");
        this.markdownTableToCli(logger, "| force               |                                              | Force overwrite of all existing configuration    |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to off                     |");
        this.markdownTableToCli(logger, "| noCreateSource      |                                              | Skip source file creation if already deleted     |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to off                     |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                       | The location that you want the project generated |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to current directory       |");
        this.markdownTableToCli(logger, "Meta Data (All Optional)");
        this.markdownTableToCli(logger, "| title               | plain text                                   | Used on the web index page                       |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to packageName             |");
        this.markdownTableToCli(logger, "| description         | plain text                                   | Meta data description                            |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to title                   |");
        this.markdownTableToCli(logger, "| shortName           | plain text (usually <= 12 chars)             | Meta data short name                             |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to title                   |");
        this.markdownTableToCli(logger, "| keywords            | comma separated plain text                   | Meta data keywords                               |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to title split on space    |");
        this.markdownTableToCli(logger, "| organization        | plain text                                   | Meta data organization                           |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| webSite             | url                                          | Url for web site associated with organization    |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| copyright           | plain text                                   | Copyright notice for application                 |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| namespace           | dotted name                                  | Namespace to use in packaging e.g. org.myorg     |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| author              | plain text                                   | Name of the app author                           |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| authorEmail         | email address                                | E-mail of the app author                         |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| authorWebSite       | url                                          | Web Site of the app author                       |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to empty                   |");
        logger.info("");
        logger.banner("buildConfiguration --operation=add");
        logger.info("");
        this.markdownTableToCli(logger, "| configurationName   | plain text                                | Name of the configuration to modify              |");
        this.markdownTableToCli(logger, "| bundle              |                                           | Should the final output be bundled               |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to off                     |");
        this.markdownTableToCli(logger, "| minify              |                                           | Should the final output be minified              |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to off                     |");
        this.markdownTableToCli(logger, "| sourcemaps          |                                           | Should the final output include sourcemaps       |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to on                      |");
        this.markdownTableToCli(logger, "| pwa                 |                                           | Include Progressive Web App functionality        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to off                     |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                    | Location of the unite.json from configure        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to current directory       |");
        logger.info("");
        logger.banner("buildConfiguration --operation=remove");
        logger.info("");
        this.markdownTableToCli(logger, "| configurationName   | plain text                                | Name of the configuration to modify              |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                    | Location of the unite.json from configure        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to current directory       |");
        logger.info("");
        logger.banner("generate");
        logger.info("");
        this.markdownTableToCli(logger, "| name                | the name you want to use for your item    | This can have spaces in it and will be           |");
        this.markdownTableToCli(logger, "|                     |                                           | reformatted during generation                    |");
        this.markdownTableToCli(logger, "| type                | specific to each applicationFramework     | See below                                        |");
        this.markdownTableToCli(logger, "| subFolder           | a folder to create your new item in       | Optional with framework defaults built in        |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                    | Location of the unite.json from configure        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to current directory       |");
        logger.info("");
        logger.banner("generate types");
        logger.info("");
        logger.info("Angular - class, component, directive, enum, guard, interface, module, pipe, service");
        logger.info("Aurelia - attribute, binding-behavior, class, component, element, enum, interface, pipeline-step, value-converter");
        logger.info("Polymer - class, component, enum, interface");
        logger.info("Preact - class, component, enum, interface");
        logger.info("React - class, component, enum, interface");
        logger.info("Vanilla - class, enum, interface");
        logger.info("Vue - class, component, enum, interface");
        logger.info("");
        logger.banner("clientPackage --operation=add");
        logger.info("");
        this.markdownTableToCli(logger, "| packageName         | plain text                                | Name of the package to add                       |");
        this.markdownTableToCli(logger, "| version             | 1.23.4                                    | Fixed version to install                         |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to latest version          |");
        this.markdownTableToCli(logger, "| preload             |                                           | Should the package be preloaded at app startup   |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to not preload             |");
        this.markdownTableToCli(logger, "| main                | 'path'                                    | The path to the main js file in the package      |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to looking it up           |");
        this.markdownTableToCli(logger, "|                     |                                           |   use * to mean all files to be mapped          |");
        this.markdownTableToCli(logger, "| mainMinified        | 'path'                                    | The path to the minified main js file            |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to using main              |");
        this.markdownTableToCli(logger, "| noScript            |                                           | Don't include any scripts from the package       |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to false                   |");
        this.markdownTableToCli(logger, "| includeMode         | app/test/both                             | When should the package be loaded as a module    |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to both                    |");
        this.markdownTableToCli(logger, "| scriptIncludeMode   | none/bundled/notBundled/both              | When should the package be included as a script  |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to none                    |");
        this.markdownTableToCli(logger, "| isPackage           |                                           | This is included as a package in module loaders  |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to not package             |");
        this.markdownTableToCli(logger, "| assets              | comma separated globs                     | These files are packed in platform builds        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| testingAdditions    | key1=value1,key2=value2                   | Additional scripts for testing                   |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| map                 | key1=value1,key2=value2                   | Additional module config maps                    |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| loaders             | key1=value1,key2=value2                   | Additional module config loaders                 |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| transpileAlias      | 'path'                                    | The location to build a transpiled version       |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| transpileLanguage   | JavaScript/TypeScript                     | The source language to transpile from            |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| transpileSources    | comma separated globs                     | The source files to transpile                    |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| transpileModules    | comma separated module names              | Relative module name import to replace with map  |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| transpileStripExt   |                                           | Should we strip extensions from imports          |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to false                   |");
        this.markdownTableToCli(logger, "| transpileTransforms | from1,to1,from2,to2...                    | Regex transforms to apply during transpilation   |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to empty                   |");
        this.markdownTableToCli(logger, "| packageManager      | npm/yarn                                  | The package manager to use for the add           |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to npm if not already set  |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                    | Location of the unite.json from configure        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to current directory       |");
        logger.info("");
        logger.banner("clientPackage --operation=remove");
        logger.info("");
        this.markdownTableToCli(logger, "| packageName         | plain text                                | Name of the package to remove                    |");
        this.markdownTableToCli(logger, "| packageManager      | npm/yarn                                  | The package manager to use for the remove        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to npm if not already set  |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                    | Location of the unite.json from configure        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to current directory       |");
        logger.info("");
        logger.banner("platform --operation=add");
        logger.info("");
        this.markdownTableToCli(logger, "| platformName        | Cordova/Docker/Electron/Web               | Name of the platform to add                      |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                    | Location of the unite.json from configure        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to current directory       |");
        logger.info("");
        logger.banner("platform --operation=remove");
        logger.info("");
        this.markdownTableToCli(logger, "| operation           | remove                                    |                                                  |");
        this.markdownTableToCli(logger, "| platformName        | Cordova/Docker/Electron/Web               | Name of the platform to remove                   |");
        this.markdownTableToCli(logger, "| outputDirectory     | 'path'                                    | Location of the unite.json from configure        |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to current directory       |");
        logger.info("");
        logger.banner("package");
        logger.info("");
        this.markdownTableToCli(logger, "| packageName         | plain text                                | Name of the package to add                       |");
        logger.info("");
        logger.banner("Global Arguments");
        logger.info("");
        this.markdownTableToCli(logger, "| noColor             |                                           | If this is used no color will appear in output   |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to on                      |");
        this.markdownTableToCli(logger, "| logFile             | 'filename'                                | The log file to store the logging in             |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to no file logging         |");
        this.markdownTableToCli(logger, "| disableVersionCheck |                                           | Switch off the check for a new version           |");
        this.markdownTableToCli(logger, "");
        logger.info("");
        logger.banner("More Information");
        logger.info("");
        logger.info("  See https://github.com/unitejs/cli#readme for further details.");
        return 0;
    }
    displayAdditionalVersion(logger) {
        logger.banner(`Engine v${this._engine.version()}`);
    }
}
CLI.APP_NAME = "UniteJS";
exports.CLI = CLI;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
